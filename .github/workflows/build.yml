name: Build

on:
  push:
    branches:
      - qml

env:
  RUSTFLAGS: "-Dwarnings"

jobs:
  prepare-qt:
    name: Prepare QT
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Prepare env
        run: |
          echo QT_DIR_PATH=${{ runner.temp }}/qt >> "${{ github.env }}"
          echo QT_DIR_SRC=${{ runner.temp }}/qt_src >> "${{ github.env }}"

      - name: Cache QT
        uses: actions/cache@v3
        with:
          path: ${{ env.QT_DIR_PATH }}
          key: qt-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('./.github/workflows/build_qt.sh') }}

      - name: Compile QT
        if: ${{ steps.cache-qt.outputs.cache-hit != 'true' }}
        run: ${{ github.workspace }}/.github/workflows/build_qt.sh

  build:
    name: Build
    needs: prepare-qt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Prepare env
        env:
          QT_DIR_PATH: ${{ runner.temp }}/qt
        run: |
          echo QT_DIR_PATH=${QT_DIR_PATH} >> "${{ github.env }}"
          echo QMAKE=${QT_DIR_PATH}/bin/qmake >> "${{ github.env }}"
          echo QT_INCLUDE_PATH=${QT_DIR_PATH}/include >> "${{ github.env }}"
          echo QT_LIBRARY_PATH=${QT_DIR_PATH}/lib >> "${{ github.env }}"
          echo QT_QPA_PLATFORM_PLUGIN_PATH=${QT_DIR_PATH}/share/qt/plugins/platforms >> "${{ github.env }}"
          echo QML2_IMPORT_PATH=${QT_DIR_PATH}/share/qt/qml >> "${{ github.env }}"

      - name: Prepare Cargo
        id: prepare-cargo
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Load QT
        uses: actions/cache@v3
        with:
          path: ${{ env.QT_DIR_PATH }}
          key: qt-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('./.github/workflows/build_qt.sh') }}
          fail-on-cache-miss: true

      - name: Format
        run: cargo fmt --all -- --check

      - name: Build
        run: cargo check --verbose

      - name: Lint
        run: cargo clippy --verbose -- -W clippy::pedantic

      - name: Test
        run: cargo test --verbose --no-fail-fast
