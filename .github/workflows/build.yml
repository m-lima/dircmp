name: Build

on:
  push:
    branches:
      - qml

env:
  RUSTFLAGS: "-Dwarnings"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      qt-dir: ~/qt
      qt-version: 6.5.1
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Prepare Cargo
        id: prepare-cargo
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache Cargo
        id: cache-cargo
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-cargo-${{ steps.prepare-cargo.outputs.cachekey }}-${{ hashFiles('Cargo.lock') }}
          path: |
            ~/.cargo
            target

      - name: Prepare QT
        working-directory: ${{ runner.temp }}
        run: |
          cat > build_qt.sh <<EOF
          set -e
          sudo apt update
          sudo apt -y install \
            git \
            libclang-dev \
            libgl1-mesa-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxrender-dev \
            libxcb1-dev \
            libxcb-glx0-dev \
            libxcb-keysyms1-dev \
            libxcb-image0-dev \
            libxcb-shm0-dev \
            libxcb-icccm4-dev \
            libxcb-sync-dev \
            libxcb-xfixes0-dev \
            libxcb-shape0-dev \
            libxcb-randr0-dev \
            libxcb-render-util0-dev \
            libxcb-util-dev \
            libxcb-xinerama0-dev \
            libxcb-xkb-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libatspi2.0-dev \
            dbus-x11 \
            libpcre2-dev \
            cmake \
            ninja-build \
            clang
          mkdir ${{ env.qt-dir }}
          git clone https://code.qt.io/qt/qt5.git qt
          cd qt
          git checkout v6.5.1
          perl ./init-repository --module-subset=essential,qtsvg,qtimageformats,qtcharts,qtquick3d,qtshadertools
          mkdir build
          cd build
          ../configure \
            -prefix ${{ env.qt-dir }} \
            -release \
            -static \
            -static-runtime \
            -opensource \
            -nomake tools \
            -nomake examples \
            -nomake tests \
            -nomake benchmarks \
            -nomake manual-tests \
            -opengl desktop \
            -qt-zlib \
            -qt-freetype \
            -qt-harfbuzz \
            -qt-libpng \
            -qt-libjpeg \
            -qt-sqlite \
            -qt-pcre \
            -ltcg \
            -optimize-size \
            -no-qml-debug
          cmake --build . --parallel 2
          cmake --install .
          EOF
          chmod +x build_qt.sh

      - name: Cache QT
        id: cache-qt
        working-directory: ${{ runner.temp }}
        uses: actions/cache@v3
        with:
          path: ${{ env.qt-dir }}
          key: ${{ runner.os }}-${{ runner.arch }}-qt-${{ hashFiles(build_qt.sh) }}

      - name: Compile QT
        if: ${{ steps.cache-qt.outputs.cache-hit != 'true' }}
        working-directory: ${{ runner.temp }}
        run: ./build_qt.sh
        # uses: anthepro/install-qt-static@v1
        # with:
        #   version: ${{ env.qt-version }}
        #   configure-args: >-
        #     -opensource
        #     -nomake tools
        #     -nomake examples
        #     -nomake tests
        #     -nomake benchmarks
        #     -nomake manual-tests
        #     -opengl desktop
        #     -qt-zlib
        #     -qt-freetype
        #     -qt-harfbuzz
        #     -qt-libpng
        #     -qt-libjpeg
        #     -qt-sqlite
        #     -qt-pcre
        #     -ltcg
        #     -optimize-size
        #     -no-qml-debug
        #   submodules: essential,qtsvg,qtimageformats,qtcharts,qtquick3d,qtshadertools
        #   dir: ${{ env.qt-dir }}

      - name: Format
        run: cargo fmt --all -- --check

      - name: Build
        run: cargo check --verbose

      - name: Lint
        run: cargo clippy --verbose -- -W clippy::pedantic

      - name: Test
        run: cargo test --verbose --no-fail-fast
